/*
First time? Check out the tutorial game:
https://sprig.hackclub.com/gallery/getting_started

@title: Maze Game
@author: Felix Gao
@tags: ["Maze", "Idk"]
@addedOn: 2024-00-00
*/

/* US! */
const player = "p";

/* Enemies! */
const laserVert = "v";
const laserVertOff = "o";

const laserHorz = "h";
const laserHorzOff = "f";

/* Misc */
const LevelUp = "l"
const Wall = "w";

/* This door is never unlockable */
const Door = "d";
const DoorHorz = "a";
  
const DoorLocked = "z";
const DoorLockedHorz = "x";

const Key = "k";

setLegend(
  [player, bitmap`
................
................
................
...666666666....
...666666666....
...666666666....
...666666666....
...666666666....
...666666666....
...666666666....
...666666666....
...666666666....
...666666666....
................
................
................`],
  [Wall, bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000`],
  [laserVert, bitmap`
................
................
................
................
................
L..............L
L1............1L
L13333333333331L
L1............1L
L..............L
................
................
................
................
................
................`],
  [laserVertOff, bitmap`
................
................
................
................
................
L..............L
L1............1L
L1............1L
L1............1L
L..............L
................
................
................
................
................
................`],
  [laserHorz, bitmap`
......LLLLL.....
.......111......
........3.......
........3.......
........3.......
........3.......
........3.......
........3.......
........3.......
........3.......
........3.......
........3.......
........3.......
........3.......
.......111......
......LLLLL.....`],
  [laserHorzOff, bitmap`
......LLLLL.....
.......111......
................
................
................
................
................
................
................
................
................
................
................
................
.......111......
......LLLLL.....`],
  [LevelUp, bitmap`
................
.DDD..DDDD..DDD.
.D............D.
.D.....DD.....D.
.......DD.......
.......DD.......
.D.....DD.....D.
.D.....DD.....D.
.D.....DD.....D.
.D..DD.DD.DD..D.
.....DDDDDD.....
......DDDD......
.D.....DD.....D.
.D............D.
.DDD..DDDD..DDD.
................`],
  [Door, bitmap`
....LLLLLLL.....
....L11111L.....
....L11111L.....
....L11111L.....
....L11111L.....
....L11111L.....
....L11111L.....
....L11111L.....
....L11111L.....
....L11111L.....
....L11111L.....
....L11111L.....
....L11111L.....
....L11111L.....
....L11111L.....
....LLLLLLL.....`],
  [DoorHorz, bitmap`
................
................
................
................
LLLLLLLLLLLLLLLL
L11111111111111L
L11111111111111L
L11111111111111L
L11111111111111L
L11111111111111L
LLLLLLLLLLLLLLLL
................
................
................
................
................`],
  [DoorLocked, bitmap`
.....LLLLLLL....
.....L11111L....
.....L11111L....
.....L11111L....
.....L16661L....
.....L61116L....
.....L61116L....
.....L16661L....
.....L11611L....
.....L11661L....
.....L11611L....
.....L11661L....
.....L11111L....
.....L11111L....
.....L11111L....
.....LLLLLLL....`],
  [DoorLockedHorz, bitmap`
................
................
................
................
................
LLLLLLL66LLLLLLL
L11111611611111L
L11111611611111L
L11111166111111L
L11111161111111L
L11111166111111L
LLLLLLL6LLLLLLLL
.......66.......
................
................
................`],
  [Key, bitmap`
................
................
................
................
.......666......
......6...6.....
......6...6.....
.......666......
........6.......
........66......
........6.......
........66......
................
................
................
................`],
)

function setDeath() {
  addText("You died! RIP!", options = { x: 3, y: 6, color: color`3` })
  setMap(death[0]);
}

/* Credit for this function: Tutroial :D */
function nextLevel() {
  level = level + 1;

  const currentLevel = levels[level];

  if (currentLevel !== undefined) {
    setMap(currentLevel);
  } else {
    addText("You WIN!", { y: 4, color: color`D` });
  }
}

/* Setup levels and different misc. screens here */
/* Using 13x10 size for most maps */
/* NOTE SELF: Each level should have the player and a checkpoint */
let level = 0
const levels = [
  map`
ww...w...w...
...w.wwwww.ww
.w.w...h.....
wwvwwwwwwwww.
...w.h.......
.www.wwwwvwww
...w.w..w.w..
..pw.ww...w.w
wwww.wwww....
l.......wwwww`,
  map`
...........k.
.............
wwwwxwww.wwww
..........w..
..........z..
..........w..
.wwwxwwwxww..
.w...w....w..
.w...w....w..
pw...w....w.l`
]

const death = [
  map`
wwwwwwwwwwwww
w...........w
w...........w
w...........w
w...........w
w...........w
w...........w
w...........w
w..p........w
wwwwwwwwwwwww`
]

/* Misc settings */
var HasKey = false;

setMap(levels[level])

setSolids([player, Wall, Door]);
setPushables({
  [player]: []
})

// inputs for player movement control
onInput("w", () => {
  getFirst(player).y -= 1;
});

onInput("a", () => {
  getFirst(player).x -= 1;
});

onInput("s", () => {
  getFirst(player).y += 1;
});

onInput("d", () => {
  getFirst(player).x += 1;
});

/* I'm too lazy to rebeat my entire game every edit lol */
onInput("j", () => {
  nextLevel();
});

let clear = false;

/* After ALL THAT SETUP ABOVE ME comes the fun part! */

afterInput(() => {

  /* If touch active laser then player die */
  const items_insides = getTile(getFirst("p").x, getFirst("p").y);
  for (let sprite of items_insides) {
    if (sprite["_type"] == "h" || sprite["_type"] == "v") {
      setDeath()
    }
  }
  /* If touch key then add key to inv */
  for (let sprite of items_insides) {
    if (sprite["_type"] == "k") {
      try {
        getFirst("z").remove();
        getFirst("x").remove();
      } catch (error) {
        console.log(error);
      }
      sprite.remove();
    }
  }

  /* If touch checkpoint promote next level! */
  for (let sprite of items_insides) {
    if (sprite["_type"] == "l") {
      nextLevel();
    }
  }
})

/* Enable and disable all lasers every 2 sec */
function updateGame() {
  if (clear) {
    getAll("f").forEach(sprite => {
      sprite.type = "h";
    });

    getAll("o").forEach(sprite => {
      sprite.type = "v";
    });
    clear = false;
  } else {
    getAll("h").forEach(sprite => {
      sprite.type = "f";
    });

    getAll("v").forEach(sprite => {
      sprite.type = "o";
    });
    clear = true;
  }
  const items_insides = getTile(getFirst("p").x, getFirst("p").y);
  for (let sprite of items_insides) {
    if (sprite["_type"] == "h" || sprite["_type"] == "v") {
      setDeath()
    }
  }
}

setInterval(updateGame, 1000);
